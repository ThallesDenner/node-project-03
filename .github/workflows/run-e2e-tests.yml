# Nome do fluxo de trabalho. Esse nome será exibido no GitHub Actions para identificar o fluxo de trabalho.
name: Run E2E Tests

# O fluxo de trabalho "Run E2E Tests" será acionado quando ocorrer um evento de pull request no repositório.
on: [pull_request]

# Lista de trabalhos a serem executados no fluxo de trabalho. Cada trabalho é uma unidade de execução independente.
jobs:
  # O trabalho "Run E2E Tests" será executado em um ambiente Ubuntu na versão mais recente.
  run-e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest

    # Lista de serviços
    services:
      # Define um serviço Docker, neste caso, um banco de dados PostgreSQL. Esse serviço é útil para testes E2E, pois permite que os testes interajam com um banco de dados isolado durante a execução.
      postgresql:
        # Imagem Docker a ser usada para criar o serviço PostgreSQL.
        image: bitnami/postgresql

        # Mapeia a porta 5432 do contêiner para a porta 5430 do host.
        ports:
          - 5430:5432

        # Variáveis de ambiente para o serviço PostgreSQL.
        env:
          POSTGRESQL_USERNAME: admin
          POSTGRESQL_PASSWORD: p03db
          POSTGRESQL_DATABASE: project-03-database

    # Lista de passos que serão executados no trabalho "Run E2E Tests"
    steps:
      # Utiliza a ação checkout para clonar o repositório na versão 3. Isso garante que o código mais recente seja obtido antes da execução do fluxo de trabalho.
      - uses: actions/checkout@v3

      # Utiliza a ação setup-node para configurar o ambiente Node.js. Define a versão do Node.js para 20 e usa o cache npm para acelerar a instalação de dependências nas execuções subsequentes.
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      # Executa o comando npm ci, que instala as dependências do projeto de acordo com o arquivo package-lock.json. 
      # A principal diferença entre npm ci e npm i é que npm ci ignora o package.json durante a instalação e instala exatamente as versões especificadas no package-lock.json.
      # O npm i instala as dependências especificadas no arquivo package.json. Se houver qualquer alteração nas versões das dependências no package.json, essas mudanças serão refletidas no arquivo package-lock.json.
      # Portanto, em um ambiente CI/CD, onde a consistência nas versões das dependências é crucial, npm ci é frequentemente preferido para garantir que as versões exatas especificadas no package-lock.json sejam instaladas.
      - run: npm ci

      # Executa o comando npm run test:e2e para rodar os testes end-to-end do projeto.
      - run: npm run test:e2e
        # Variáveis de ambiente para os testes end-to-end.
        env:
          JWT_SECRET: testing
          DATABASE_URL: "postgresql://admin:p03db@localhost:5430/project-03-database?schema=public"

# Em resumo, este fluxo de trabalho automatiza a execução de testes end-to-end em um projeto Node.js sempre que ocorrer um evento de pull request no repositório. Ele configura o ambiente, instala dependências, e executa os testes definidos no script test:e2e no arquivo package.json.